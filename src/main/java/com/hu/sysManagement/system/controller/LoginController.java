package com.hu.sysManagement.system.controller;import com.hu.sysManagement.common.controller.BaseController;import com.hu.sysManagement.common.domain.Tree;import com.hu.sysManagement.common.utils.MD5Utils;import com.hu.sysManagement.common.utils.Result;import com.hu.sysManagement.common.utils.ShiroUtils;import com.hu.sysManagement.system.domain.LoginLog;import com.hu.sysManagement.system.domain.Menu;import com.hu.sysManagement.system.service.LoginLogService;import com.hu.sysManagement.system.service.MenuService;import com.hu.sysManagement.system.service.UserService;import java.util.Date;import java.util.List;import javax.servlet.http.HttpServletRequest;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.AuthenticationException;import org.apache.shiro.authc.UsernamePasswordToken;import org.apache.shiro.session.Session;import org.apache.shiro.subject.Subject;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.ResponseBody;@Controllerpublic class LoginController extends BaseController {	private final Logger logger = LoggerFactory.getLogger(getClass());	@Autowired	MenuService menuService;	@Autowired	private LoginLogService loginLogService;	@Autowired	private UserService userService;	@GetMapping({ "/", "" })	String welcome(Model model) {		return "redirect:/login";	}	@GetMapping({ "/index" })	String index(Model model) {		Long homepage = getUser().getHomepage();		Menu m = menuService.get(homepage);		List<Menu> subs = menuService.getSubs(getUser().getUserId());		if ((homepage != null) && (m != null) && (ShiroUtils.isPermitted(m.getPerms()))) {			model.addAttribute("main", m.getUrl());		} else if ((subs != null) && (subs.size() > 0)) {			homepage = ((Menu) subs.get(0)).getMenuId();			m = menuService.get(homepage);			model.addAttribute("main", m.getUrl());		} else {			model.addAttribute("main", "/noPerms");		}		List<Tree<Menu>> menus = menuService.listMenuTree(getUserId(), homepage);		model.addAttribute("menus", menus);		model.addAttribute("name", getUser().getName());		model.addAttribute("subs", subs);		model.addAttribute("username", getUser().getUsername());		model.addAttribute("curPage", homepage);		return "index";	}	@GetMapping({ "/{menuId}" })	String jump(Model model, @PathVariable("menuId") Long menuId) {		Menu m = menuService.get(menuId);		List<Menu> subs = menuService.getSubs(getUser().getUserId());		model.addAttribute("subs", subs);		model.addAttribute("username", getUser().getUsername());		model.addAttribute("curPage", menuId);		model.addAttribute("main", "noPerms");		for (Menu sub : subs) {			if (sub.getMenuId().equals(menuId)) {				List menus = menuService.listMenuTree(getUserId(), menuId);				model.addAttribute("menus", menus);				model.addAttribute("name", getUser().getName());				model.addAttribute("main", m.getUrl());			}		}		return "index";	}	@GetMapping({ "/login" })	String login() {		return "login";	}	@PostMapping({ "/login" })	@ResponseBody	Result ajaxLogin(String username, String password, HttpServletRequest request) {		password = MD5Utils.encrypt(username, password);		System.out.println(password);		UsernamePasswordToken token = new UsernamePasswordToken(username, password);		Subject subject = SecurityUtils.getSubject();		LoginLog loginLog = new LoginLog();		loginLog.setLoginIp(request.getRemoteHost());		loginLog.setLoginTime(new Date());		try {			subject.login(token);			loginLog.setRemark("登录成功");			return Result.ok();		} catch (AuthenticationException e) {			loginLog.setRemark(e.getMessage());			return Result.error(e.getMessage());		} finally {			Session session = ShiroUtils.getSession();			loginLog.setUserId((Long) session.getAttribute("userId"));			loginLogService.save(loginLog);			session.setAttribute("loginId", loginLog.getLoginId());		}	}	@GetMapping({ "/sysLogout" })	String logout() {		Session session = ShiroUtils.getSession();		LoginLog loginLog = loginLogService.getByid((Long) session.getAttribute("loginId"));		if (loginLog != null) {			loginLog.setLogoutTime(new Date());			loginLogService.update(loginLog);		}		ShiroUtils.logout();		return "redirect:/login";	}	@GetMapping({ "/main" })	String main() {		return "main";	}	@GetMapping({ "/notFound" })	String notFound() {		return "error/404";	}	@GetMapping({ "/error" })	String error() {		return "error/500";	}	@GetMapping({ "/noPerms" })	String noPerms() {		return "error/403";	}}