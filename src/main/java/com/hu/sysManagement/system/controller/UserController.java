package com.hu.sysManagement.system.controller;import com.hu.sysManagement.common.config.Constant;import com.hu.sysManagement.common.controller.BaseController;import com.hu.sysManagement.common.domain.Tree;import com.hu.sysManagement.common.service.DictService;import com.hu.sysManagement.common.utils.BeanFilter;import com.hu.sysManagement.common.utils.MD5Utils;import com.hu.sysManagement.common.utils.PageUtils;import com.hu.sysManagement.common.utils.Query;import com.hu.sysManagement.common.utils.Result;import com.hu.sysManagement.system.domain.Dept;import com.hu.sysManagement.system.domain.Role;import com.hu.sysManagement.system.domain.User;import com.hu.sysManagement.system.domain.UserUpdate;import com.hu.sysManagement.system.service.MenuService;import com.hu.sysManagement.system.service.RoleService;import com.hu.sysManagement.system.service.UserService;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import org.apache.commons.lang3.StringUtils;import org.apache.shiro.authz.annotation.RequiresPermissions;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;@RequestMapping({"/sys/user"})@Controllerpublic class UserController extends BaseController {    private String prefix = "sysManagement/system/user";    @Autowired    UserService userService;    @Autowired    RoleService roleService;    @Autowired    DictService dictService;    @Autowired    MenuService menuService;    @Autowired    private BeanFilter<User> filter;    @Autowired    private BeanFilter<UserUpdate> voFilter;    @RequiresPermissions({"sys:user:user"})    @GetMapping({""})    String user(Model model) {        List<Role> roles = roleService.list(new HashMap<String, Object>());        model.addAttribute("roles", roles);        model.addAttribute("suffix", Constant.suffix);        model.addAttribute("generateMode", Constant.generateMode);        model.addAttribute("sexList", dictService.getSexList());        model.addAttribute("userStatus", dictService.listByType("userStatus"));        return prefix + "/user";    }    @GetMapping({"/list"})    @ResponseBody    PageUtils list(@RequestParam Map<String, Object> params) {        if (StringUtils.isNotBlank((String) params.get("sex"))) {            String[] sex = ((String) params.get("sex")).split(",");            params.put("sex", sex);        }        if (StringUtils.isNotBlank((String) params.get("status"))) {            String[] status = ((String) params.get("status")).split(",");            params.put("status", status);        }        Query query = new Query(params);        List<Map<String, Object>> sysUserList = userService.list(query);        int total = userService.count(query);        PageUtils pageUtil = new PageUtils(sysUserList, total);        return pageUtil;    }    @GetMapping({"/ownRoles/{id}"})    @ResponseBody    List<Long> ownRoles(Model model, @PathVariable("id") Long id) {        List<Role> roles = roleService.list(id);        List<Long> roleIds = new ArrayList<Long>();        for (int i = 0; i < roles.size(); i++) {            if ("true".equals(((Role) roles.get(i)).getRoleSign())) {                roleIds.add(((Role) roles.get(i)).getRoleId());            }        }        return roleIds;    }    @GetMapping({"/ownDataPerms/{id}"})    @ResponseBody    Map<String, Object> ownDataPerms(@PathVariable("id") Long id) {        Map<String, Object> map = new HashMap<String, Object>();        User user = userService.get(id);        String names = "";        List<Long> dataPerms = user.getDataPerms();        if (dataPerms != null) {            Long[] perms = new Long[dataPerms.size()];            dataPerms.toArray(perms);            List<User> users = userService.findByIds(perms);            if (users.size() > 0) {                for (User u : users) {                    names = names + u.getName() + ",";                }                names = names.substring(0, names.length() - 1);            }        }        map.put("dataPermIds", dataPerms);        map.put("dataPermNames", names);        return map;    }    @RequiresPermissions({"sys:user:add"})    @PostMapping({"/save"})    @ResponseBody    Result save(User user) {        filter.clearSpace(user);        user.setUserIdCreate(getUserId());        user.setGmtCreate(new Date());        user.setPassword(MD5Utils.encrypt(user.getUsername(), Constant.defaultPassword));        if (userService.save(user) > 0) {            return Result.ok();        }        return Result.error();    }    @RequiresPermissions({"sys:user:edit"})    @PostMapping({"/update"})    @ResponseBody    Result update(User user) {        filter.clearSpace(user);        user.setGmtModified(new Date());        if (userService.update(user) > 0) {            return Result.ok();        }        return Result.error();    }    @PostMapping({"/updatePeronal"})    @ResponseBody    Result updatePeronal(User user) {        filter.clearSpace(user);        if (userService.updatePersonal(user) > 0) {            return Result.ok();        }        return Result.error();    }    @RequiresPermissions({"sys:user:remove"})    @GetMapping({"/remove/{userId}"})    @ResponseBody    Result remove(@PathVariable("userId") Long userId) {        return userService.remove(userId);    }    @PostMapping({"/exist"})    @ResponseBody    boolean exist(@RequestParam Map<String, Object> params) {        return userService.count(BeanFilter.clearSpace(params)) <= 0;    }    @PostMapping({"/resetPwd"})    @ResponseBody    Result resetPwd(UserUpdate userVO) {        filter.clearSpace(userVO.getUser());        voFilter.clearSpace(userVO);        try {            userService.resetPwd(userVO, getUser());            return Result.ok();        } catch (Exception e) {            return Result.error(1, e.getMessage());        }    }    @RequiresPermissions({"sys:user:resetPwd"})    @GetMapping({"/adminResetPwd/{id}"})    @ResponseBody    Result adminResetPwd(@PathVariable("id") Long id) {        try {            userService.adminResetPwd(id);            return Result.ok();        } catch (Exception e) {            return Result.error(1, e.getMessage());        }    }    @GetMapping({"/tree"})    @ResponseBody    public Tree<Dept> tree() {        Tree<Dept> tree = new Tree<Dept>();        tree = userService.getTree();        return tree;    }    @GetMapping({"/treeView"})    String treeView() {        return prefix + "/userTree";    }    @GetMapping({"/personal"})    String personal(Model model) {        User user = userService.get(getUserId());        model.addAttribute("user", user);        model.addAttribute("suffix", Constant.suffix);        model.addAttribute("generateMode", Constant.generateMode);        model.addAttribute("hobbyList", dictService.getHobbyList(user));        model.addAttribute("sexList", dictService.getSexList());        model.addAttribute("subs", menuService.getSubs(getUserId()));        return prefix + "/personal";    }}