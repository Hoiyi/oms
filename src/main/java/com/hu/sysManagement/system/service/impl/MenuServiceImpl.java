package com.hu.sysManagement.system.service.impl;import com.hu.sysManagement.common.domain.Tree;import com.hu.sysManagement.common.utils.BuildTree;import com.hu.sysManagement.system.dao.MenuDao;import com.hu.sysManagement.system.dao.RoleMenuDao;import com.hu.sysManagement.system.dao.UserDao;import com.hu.sysManagement.system.domain.Menu;import com.hu.sysManagement.system.domain.User;import com.hu.sysManagement.system.service.MenuService;import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Set;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.cache.annotation.Cacheable;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;@Service@Transactional(readOnly = true, rollbackFor = {Exception.class})public class MenuServiceImpl        implements MenuService {    @Autowired    MenuDao menuMapper;    @Autowired    RoleMenuDao roleMenuMapper;    @Autowired    UserDao userDao;    @Cacheable    @Override    public Tree<Menu> getSysMenuTree(Long id) {        List trees = new ArrayList();        List<Menu> menus = this.menuMapper.listMenuByUserId(id);        for (Menu sysMenu : menus) {            Tree tree = new Tree();            tree.setId(sysMenu.getMenuId().toString());            tree.setParentId(sysMenu.getParentId().toString());            tree.setText(sysMenu.getName());            Map attributes = new HashMap(16);            attributes.put("url", sysMenu.getUrl());            attributes.put("icon", sysMenu.getIcon());            tree.setAttributes(attributes);            trees.add(tree);        }        Tree t = BuildTree.build(trees);        return t;    }    @Override    public List<Menu> list(Map<String, Object> params) {        List menus = this.menuMapper.list(params);        return menus;    }    @Transactional(readOnly = false, rollbackFor = {Exception.class})    @Override    public int remove(Long id) {        int result = this.menuMapper.remove(id);        return result;    }    @Transactional(readOnly = false, rollbackFor = {Exception.class})    @Override    public int save(Menu menu) {        int r = this.menuMapper.save(menu);        return r;    }    @Transactional(readOnly = false, rollbackFor = {Exception.class})    @Override    public int update(Menu menu) {        int r = this.menuMapper.updatePj(menu);        return r;    }    @Override    public Menu get(Long id) {        Menu menu = this.menuMapper.get(id);        return menu;    }    @Override    public Tree<Menu> getTree() {        List trees = new ArrayList();        List<Menu> menus = this.menuMapper.list(new HashMap(16));        for (Menu sysMenu : menus) {            Tree tree = new Tree();            tree.setId(sysMenu.getMenuId().toString());            tree.setParentId(sysMenu.getParentId().toString());            tree.setText(sysMenu.getName());            trees.add(tree);        }        Tree t = BuildTree.build(trees);        return t;    }    @Override    public Tree<Menu> getTree(Long id, boolean isDisabled) {        List<Menu> menus = this.menuMapper.list(new HashMap(16));        List menuIds = this.roleMenuMapper.listMenuIdByRoleId(id);        List temp = menuIds;        for (Menu menu : menus) {            if (temp.contains(menu.getParentId())) {                menuIds.remove(menu.getParentId());            }        }        List trees = new ArrayList();        List<Menu> ms = this.menuMapper.list(new HashMap(16));        for (Menu sysMenu : ms) {            Tree tree = new Tree();            tree.setId(sysMenu.getMenuId().toString());            tree.setParentId(sysMenu.getParentId().toString());            tree.setText(sysMenu.getName());            Map state = new HashMap(16);            Long menuId = sysMenu.getMenuId();            if (menuIds.contains(menuId)) {                state.put("selected", Boolean.valueOf(true));            } else {                state.put("selected", Boolean.valueOf(false));            }            if (isDisabled) {                state.put("disabled", Boolean.valueOf(true));            }            tree.setState(state);            trees.add(tree);        }        Tree t = BuildTree.build(trees);        return t;    }    @Override    public Set<String> listPerms(Long userId) {        List<String> perms = this.menuMapper.listUserPerms(userId);        Set permsSet = new HashSet();        for (String perm : perms) {            if (StringUtils.isNotBlank(perm)) {                permsSet.addAll(Arrays.asList(perm.trim().split(",")));            }        }        return permsSet;    }    @Override    public List<Tree<Menu>> listMenuTree(Long id, Long topMeunId) {        List trees = new ArrayList();        List<Menu> menus = this.menuMapper.listMenuByUserId(id);        for (Menu menu : menus) {            Tree tree = new Tree();            tree.setId(menu.getMenuId().toString());            tree.setParentId(menu.getParentId().toString());            tree.setText(menu.getName());            Map attributes = new HashMap(16);            attributes.put("url", menu.getUrl());            attributes.put("icon", menu.getIcon());            tree.setAttributes(attributes);            trees.add(tree);        }        List list = BuildTree.buildList(trees, String.valueOf(topMeunId));        return list;    }    @Override    public List<Menu> getSubs(Long id) {        List result = new ArrayList(16);        User user = this.userDao.get(id);        List menus = this.menuMapper.listMenuByUserId(id);        Iterator it = menus.iterator();        Menu menu = null;        while (it.hasNext()) {            menu = (Menu) it.next();            if (menu.getParentId().longValue() == 0L) {                result.add(menu);                if (user.getHomepage() == menu.getMenuId()) {                    menu.setMenuSign("true");                }            }            it.remove();        }        return result;    }}