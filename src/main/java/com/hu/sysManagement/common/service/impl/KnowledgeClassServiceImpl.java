package com.hu.sysManagement.common.service.impl;import com.hu.sysManagement.common.dao.KnowledgeClassDao;import com.hu.sysManagement.common.domain.KnowledgeClass;import com.hu.sysManagement.common.service.KnowledgeClassService;import com.hu.sysManagement.common.utils.BeanMapConvertUtil;import com.hu.sysManagement.common.utils.Result;import java.util.HashMap;import java.util.List;import java.util.Map;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;@Transactional@Servicepublic class KnowledgeClassServiceImpl        implements KnowledgeClassService {    @Autowired    private com.hu.knowledge.knowledgeStore.dao.KnowledgeDao KnowledgeDao;    @Autowired    private KnowledgeClassDao KnowledgeClassDao;    BeanMapConvertUtil<KnowledgeClass> convertUtil = new BeanMapConvertUtil(KnowledgeClass.class);    @Override    public List<Map<String, Object>> list(Map<String, Object> map) {        return KnowledgeClassDao.list(map);    }    @Override    public List<KnowledgeClass> KnowledgeClassList(Map<String, Object> map) {        return convertUtil.convert(list(map));    }    @Override    public int count(Map<String, Object> map) {        return KnowledgeClassDao.count(map);    }    @Override    public int save(KnowledgeClass knowledgeClass) {        return KnowledgeClassDao.insert(knowledgeClass).intValue();    }    @Override    public KnowledgeClass findById(Long classId) {        return (KnowledgeClass) KnowledgeClassDao.selectById(classId);    }    @Override    public Result update(KnowledgeClass knowledgeClass) {        Map params = new HashMap(1);        params.put("klClassId", knowledgeClass.getKlClassId());        if (KnowledgeDao.count(params) > 0) {            KnowledgeClass old = (KnowledgeClass) KnowledgeClassDao.selectById(knowledgeClass.getKlClassId());            if ((old.getPlatId() != null) && (old.getPlatId() != knowledgeClass.getPlatId())) {                return Result.error("此类型已在使用,不可修改所属平台");            }        }        if (KnowledgeClassDao.updateById(knowledgeClass).intValue() > 0) {            return Result.ok();        }        return Result.error();    }    @Override    public Result remove(Long classId) {        Map params = new HashMap(1);        params.put("klClassId", classId);        if (KnowledgeDao.count(params) > 0) {            return Result.error("删除失败，此类型已在使用");        }        if (KnowledgeClassDao.deleteById(classId).intValue() > 0) {            return Result.ok();        }        return Result.error();    }}