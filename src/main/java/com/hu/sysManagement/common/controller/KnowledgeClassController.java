package com.hu.sysManagement.common.controller;import com.hu.sysManagement.common.domain.KnowledgeClass;import com.hu.sysManagement.common.service.KnowledgeClassService;import com.hu.sysManagement.common.utils.BeanFilter;import com.hu.sysManagement.common.utils.PageUtils;import com.hu.sysManagement.common.utils.Query;import com.hu.sysManagement.common.utils.Result;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import org.apache.shiro.authz.annotation.RequiresPermissions;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;@Controller@RequestMapping({"/common/knowledgeClass"})public class KnowledgeClassController extends BaseController {    @Autowired    private KnowledgeClassService KnowledgeClassService;    private String prefix = "sysManagement/common/knowledgeClass";    @Autowired    private BeanFilter<KnowledgeClass> filter;    @GetMapping    @RequiresPermissions({"common:knowledgeClass:knowledgeClass"})    String gasSystem() {        return this.prefix + "/knowledgeClass";    }    @GetMapping({"/list"})    @ResponseBody    @RequiresPermissions({"common:knowledgeClass:knowledgeClass"})    public PageUtils list(@RequestParam Map<String, Object> params) {        Query query = new Query(params);        List<Map<String, Object>> list = this.KnowledgeClassService.list(query);        int total = this.KnowledgeClassService.count(query);        PageUtils pageUtils = new PageUtils(list, total);        return pageUtils;    }    @GetMapping({"/autoComplate"})    @ResponseBody    public List<Map<String, Object>> autoComplate(@RequestParam Map<String, Object> params) {        params.put("klClassName", params.get("term"));        List<KnowledgeClass> kcList = this.KnowledgeClassService.KnowledgeClassList(params);        ArrayList<Map<String, Object>> lists = new ArrayList<Map<String, Object>>();        for (KnowledgeClass kc : kcList) {            Map<String, Object> map = new HashMap<String, Object>(16);            map.put("label", kc.getKlClassName());            map.put("kcId", kc.getKlClassId());            lists.add(map);        }        return lists;    }    @ResponseBody    @PostMapping({"/save"})    @RequiresPermissions({"common:knowledgeClass:add"})    public Result save(KnowledgeClass knowledgeClass) {        this.filter.clearSpace(knowledgeClass);        knowledgeClass.setCreater(getUserId());        knowledgeClass.setCreateTime(new Date());        if (this.KnowledgeClassService.save(knowledgeClass) > 0) {            return Result.ok();        }        return Result.error();    }    @ResponseBody    @PostMapping({"/quickSave"})    @RequiresPermissions({"common:knowledgeClass:add"})    public Long quickSave(KnowledgeClass knowledgeClass) {        this.filter.clearSpace(knowledgeClass);        knowledgeClass.setCreater(getUserId());        knowledgeClass.setCreateTime(new Date());        knowledgeClass.setRemark("知识库同步保存");        this.KnowledgeClassService.save(knowledgeClass);        return knowledgeClass.getKlClassId();    }    @ResponseBody    @PostMapping({"/update"})    @RequiresPermissions({"common:knowledgeClass:edit"})    public Result update(KnowledgeClass knowledgeClass) {        this.filter.clearSpace(knowledgeClass);        return this.KnowledgeClassService.update(knowledgeClass);    }    @ResponseBody    @GetMapping({"/remove/{klClassId}"})    @RequiresPermissions({"common:knowledgeClass:remove"})    public Result remove(@PathVariable("klClassId") Long klClassId) {        return this.KnowledgeClassService.remove(klClassId);    }    @PostMapping({"/exist"})    @ResponseBody    boolean exist(@RequestParam Map<String, Object> params) {        return this.KnowledgeClassService.count(BeanFilter.clearSpace(params)) <= 0;    }    @GetMapping({"/knowledgeClassWindow/{platId}"})    String knowledgeWindow(@PathVariable("platId") Long platId, Model model) {        model.addAttribute("platId", platId);        return this.prefix + "/knowledgeClassWindow";    }}