package com.hu.sysManagement.common.controller;import com.hu.sysManagement.common.domain.District;import com.hu.sysManagement.common.service.DistrictService;import com.hu.sysManagement.common.utils.BeanFilter;import com.hu.sysManagement.common.utils.PageUtils;import com.hu.sysManagement.common.utils.Query;import com.hu.sysManagement.common.utils.Result;import com.hu.sysManagement.system.domain.User;import java.util.ArrayList;import java.util.List;import java.util.Map;import org.apache.commons.lang3.StringUtils;import org.apache.shiro.authz.annotation.RequiresPermissions;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;@Controller@RequestMapping({"/common/district"})public class DistrictController extends BaseController {    @Autowired    private DistrictService districtService;    @Autowired    private BeanFilter<District> filter;    private String prefix = "sysManagement/common/district";    @GetMapping    @RequiresPermissions({"common:district:district"})    String district(Model model) {        List<User> principals = this.districtService.principalList();        model.addAttribute("principals", principals);        return this.prefix + "/district";    }    @ResponseBody    @GetMapping({"/list"})    @RequiresPermissions({"common:district:district"})    public PageUtils list(@RequestParam Map<String, Object> params) {        if (StringUtils.isNotBlank((String) params.get("principalId"))) {            String[] principalId = ((String) params.get("principalId")).split(",");            params.put("principalId", principalId);        }        Query query = new Query(params);        List<Map<String, Object>> districtList = this.districtService.list(query);        int total = this.districtService.count(query);        PageUtils pageUtils = new PageUtils(districtList, total);        return pageUtils;    }    @ResponseBody    @GetMapping({"/used/{distId}"})    public List<String> used(@PathVariable("distId") Long distId) {        ArrayList<String> list = new ArrayList<String>();        List<District> districtList = this.districtService.DistrictList(null);        for (District district : districtList) {            if (district.getDistId() != distId) {                list.addAll(district.getPrefectures());            }        }        return list;    }    @PostMapping({"/exist"})    @ResponseBody    boolean exist(@RequestParam Map<String, Object> params) {        return this.districtService.count(BeanFilter.clearSpace(params)) <= 0;    }    @ResponseBody    @PostMapping({"/save"})    @RequiresPermissions({"common:district:add"})    public Result save(District district) {        this.filter.clearSpace(district);        if (this.districtService.save(district) > 0) {            return Result.ok();        }        return Result.error();    }    @ResponseBody    @PostMapping({"/update"})    @RequiresPermissions({"common:district:edit"})    public Result update(District district) {        this.filter.clearSpace(district);        if (this.districtService.update(district) > 0) {            return Result.ok();        }        return Result.error();    }    @ResponseBody    @GetMapping({"/remove/{distId}"})    @RequiresPermissions({"common:district:remove"})    public Result remove(@PathVariable("distId") Long distId) {        if (this.districtService.remove(distId) > 0) {            return Result.ok();        }        return Result.error();    }}