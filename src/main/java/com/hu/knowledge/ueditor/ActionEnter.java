package com.hu.knowledge.ueditor;import com.hu.knowledge.ueditor.define.ActionMap;import com.hu.knowledge.ueditor.define.BaseState;import com.hu.knowledge.ueditor.define.State;import com.hu.knowledge.ueditor.hunter.FileManager;import com.hu.knowledge.ueditor.hunter.ImageHunter;import com.hu.knowledge.ueditor.upload.Uploader;import java.util.Map;import javax.servlet.http.HttpServletRequest;import org.json.JSONException;public class ActionEnter {    private HttpServletRequest request = null;    private String rootPath = null;    private String contextPath = null;    private String basePath;    private String actionType = null;    private ConfigManager configManager = null;    public ActionEnter(HttpServletRequest request, String basePath) {        this.basePath = basePath;        this.request = request;        this.rootPath = basePath;        this.actionType = request.getParameter("action");        this.contextPath = request.getContextPath();        this.configManager = ConfigManager.getInstance(this.rootPath, this.contextPath, request.getRequestURI(), basePath);    }    public String exec()            throws JSONException {        String callbackName = this.request.getParameter("callback");        if (callbackName != null) {            if (!validCallbackName(callbackName)) {                return new BaseState(false, 401).toJSONString();            }            return callbackName + "(" + invoke() + ");";        }        return invoke();    }    public String invoke()            throws JSONException {        if ((this.actionType == null) || (!ActionMap.mapping.containsKey(this.actionType))) {            return new BaseState(false, 101).toJSONString();        }        if ((this.configManager == null) || (!this.configManager.valid())) {            return new BaseState(false, 102).toJSONString();        }        State state = null;        int actionCode = ActionMap.getType(this.actionType);        Map<String, Object> conf = null;        switch (actionCode) {            case 0:                return this.configManager.getAllConfig().toString();            case 1:            case 2:            case 3:            case 4:                conf = this.configManager.getConfig(actionCode);                state = new Uploader(this.request, conf).doExec();                break;            case 5:                conf = this.configManager.getConfig(actionCode);                String[] list = this.request.getParameterValues((String) conf.get("fieldName"));                state = new ImageHunter(conf).capture(list);                break;            case 6:            case 7:                conf = this.configManager.getConfig(actionCode);                int start = getStartIndex();                state = new FileManager(conf, this.basePath).listFile(start);        }        return state.toJSONString();    }    public int getStartIndex() {        String start = this.request.getParameter("start");        try {            return Integer.parseInt(start);        } catch (Exception e) {        }        return 0;    }    public boolean validCallbackName(String name) {        if (name.matches("^[a-zA-Z_]+[\\w0-9_]*$")) {            return true;        }        return false;    }}