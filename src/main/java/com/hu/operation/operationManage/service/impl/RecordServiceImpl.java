package com.hu.operation.operationManage.service.impl;import com.hu.knowledge.knowledgeStore.domain.Knowledge;import com.hu.operation.operationManage.dao.RecordDao;import com.hu.operation.operationManage.domain.Customer;import com.hu.operation.operationManage.domain.Record;import com.hu.operation.operationManage.service.RecordService;import com.hu.sysManagement.common.dao.DictDao;import com.hu.sysManagement.common.domain.Dict;import com.hu.sysManagement.common.utils.Query;import java.util.HashMap;import java.util.List;import java.util.Map;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Servicepublic class RecordServiceImpl implements RecordService {    @Autowired    private RecordDao recordDao;    @Autowired    private DictDao dictDao;    @Override    public List<Map<String, Object>> list(Query query) {        return recordDao.list(query);    }    @Override    public int count(Query query) {        return recordDao.count(query);    }    @Override    public int save(Record record) {        return recordDao.insert(record).intValue();    }    @Override    public Record findById(Long reId) {        return (Record) recordDao.selectById(reId);    }    @Override    public int update(Record record) {        return recordDao.updateById(record).intValue();    }    @Override    public int remove(Long reId) {        return recordDao.deleteById(reId).intValue();    }    @Override    public List<Dict> prostateList() {        Map<String, Object> param = new HashMap<>(16);        param.put("type", "pro_state");        return dictDao.list(param);    }    @Override    public List<Dict> keyproblemList() {        HashMap<String, Object> param = new HashMap<>(16);        param.put("type", "key_problem");        return dictDao.list(param);    }    @Override    public List<Customer> queryCusName(String customerName) {        return recordDao.queryCusName(customerName);    }    @Override    public List<Knowledge> queryDescribe(String describe) {        return recordDao.queryDescribe(describe);    }    @Override    public List<Map<String, Object>> gaslist(Query query) {        return recordDao.gaslist(query);    }}