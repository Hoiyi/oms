package com.hu.operation.operationManage.controller;import com.hu.operation.operationManage.domain.Reading;import com.hu.operation.operationManage.service.ReadingService;import com.hu.sysManagement.common.controller.BaseController;import com.hu.sysManagement.common.service.DictService;import com.hu.sysManagement.common.utils.PageUtils;import com.hu.sysManagement.common.utils.Query;import com.hu.sysManagement.common.utils.Result;import java.util.Date;import java.util.List;import java.util.Map;import org.apache.commons.lang3.StringUtils;import org.apache.shiro.authz.annotation.RequiresPermissions;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;@Controller@RequestMapping({"/operation/reading"})public class ReadingController extends BaseController {    @Autowired    private ReadingService readingService;    @Autowired    private ReadingService readingCountService;    @Autowired    DictService dictService;    private String prefix = "operation/operationManage/reading";    @GetMapping    @RequiresPermissions({"operation:reading:reading"})    String user(Model model) {        model.addAttribute("executeState",                dictService.listByType("executeState"));        model.addAttribute("user", getUser());        return prefix + "/reading";    }    @ResponseBody    @GetMapping({"/list"})    @RequiresPermissions({"operation:reading:reading"})    public PageUtils list(@RequestParam Map<String, Object> params) {        if (StringUtils.isNotBlank((String) params.get("executeState"))) {            String[] status = ((String) params.get("executeState")).split(",");            getUser();            params.put("executeState", status);        }        Query query = new Query(params);        List<Map<String, Object>> readingList = readingService.list(query);        int total = readingCountService.count(query);        PageUtils pageUtils = new PageUtils(readingList, total);        return pageUtils;    }    @ResponseBody    @GetMapping({"/userList"})    @RequiresPermissions({"operation:reading:reading"})    public PageUtils check(@RequestParam Map<String, Object> params) {        Query query = new Query(params);        List<Map<String, Object>> checkUser = readingService.userList(query);        int total = readingCountService.amount(query);        PageUtils pageUtils = new PageUtils(checkUser, total);        return pageUtils;    }    @ResponseBody    @PostMapping({"/save"})    @RequiresPermissions({"operation:reading:add"})    public Result save(Reading reading) {        if (readingService.save(reading) > 0) {            return Result.ok();        }        return Result.error();    }    @ResponseBody    @PostMapping({"/update"})    @RequiresPermissions({"operation:reading:edit"})    public Result update(Reading reading) {        reading.setWriteTime(new Date());        reading.setUpdateTime(new Date());        if (readingService.update(reading) > 0) {            return Result.ok();        }        return Result.error();    }    @ResponseBody    @PostMapping({"/remove/{rId}"})    @RequiresPermissions({"operation:reading:remove"})    public Result delete(@PathVariable("rId") Long rId) {        if (readingService.remove(rId) > 0) {            return Result.ok();        }        return Result.error();    }}