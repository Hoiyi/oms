package com.hu.operation.duty.service.Impl;import com.hu.operation.duty.dao.DutyOrderMapper;import com.hu.operation.duty.domain.DutyOrder;import com.hu.operation.duty.domain.DutyOrderExample;import com.hu.operation.duty.domain.DutyOrderExample.Criteria;import com.hu.operation.duty.service.MonthDutyService;import com.hu.sysManagement.common.utils.MailSender;import com.hu.sysManagement.system.dao.UserDao;import com.hu.sysManagement.system.domain.User;import com.hu.sysManagement.system.service.UserService;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.annotation.Resource;import javax.mail.Address;import javax.mail.internet.AddressException;import javax.mail.internet.InternetAddress;import org.springframework.stereotype.Service;@Servicepublic class MonthDutyServiceImpl        implements MonthDutyService {    @Resource    DutyOrderMapper dutyOrderMapper;    @Resource    UserDao userDao;    @Resource    UserService userService;    @Override    public List<String> list(int DutyTypeId) {        DutyOrderExample example = new DutyOrderExample();        Criteria c = example.createCriteria();        c.andDutyTypeIdEqualTo(Integer.valueOf(DutyTypeId));        List<DutyOrder> list = this.dutyOrderMapper.selectByExample(example);        String str_id = ((DutyOrder) list.get(0)).getNameOrder();        String[] ids = str_id.split(",");        List<String> userlist = new ArrayList<>();        for (String id : ids) {            User user = (User) this.userDao.selectById(id);            userlist.add(user.getName());        }        return userlist;    }    @Override    public User getDutyEmp(int DutyTypeId) {        DutyOrderExample example = new DutyOrderExample();        Criteria c = example.createCriteria();        c.andDutyTypeIdEqualTo(Integer.valueOf(DutyTypeId));        List<DutyOrder> list = this.dutyOrderMapper.selectByExample(example);        String str_id = ((DutyOrder) list.get(0)).getNameOrder();        String[] ids = str_id.split(",");        String id = ids[((DutyOrder) list.get(0)).getDutyNumber().intValue()];        User user = (User) this.userDao.selectById(id);        return user;    }    @Override    public User getNextDutyEmp(int DutyTypeId) {        DutyOrderExample example = new DutyOrderExample();        Criteria c = example.createCriteria();        c.andDutyTypeIdEqualTo(Integer.valueOf(DutyTypeId));        List<DutyOrder> list = this.dutyOrderMapper.selectByExample(example);        String str_id = ((DutyOrder) list.get(0)).getNameOrder();        int length = ((DutyOrder) list.get(0)).getFlag().intValue();        String[] ids = str_id.split(",");        int dutyNumber = ((DutyOrder) list.get(0)).getDutyNumber().intValue();        int nextDutyNumber;        if (dutyNumber == length - 1) {            nextDutyNumber = 0;        } else {            nextDutyNumber = dutyNumber + 1;        }        String id = ids[nextDutyNumber];        User user = (User) this.userDao.selectById(id);        return user;    }    @Override    public void saveDutyEmp(String name, int dutyType) {        DutyOrderExample example = new DutyOrderExample();        Criteria c = example.createCriteria();        c.andDutyTypeIdEqualTo(Integer.valueOf(dutyType));        DutyOrder dutyOrder = (DutyOrder) this.dutyOrderMapper.selectByExample(example).get(0);        String[] names = name.split(",");        String nameOrder = "";        for (String n : names) {            Map<String, Object> map = new HashMap<>();            map.put("name", n);            List<User> users = this.userService.userList(map);            User user = (User) users.get(0);            nameOrder = nameOrder + user.getUserId() + ",";        }        nameOrder = nameOrder.substring(0, nameOrder.length() - 1);        dutyOrder.setNameOrder(nameOrder);        dutyOrder.setFlag(Integer.valueOf(names.length));        if (dutyOrder.getDutyNumber().intValue() >= dutyOrder.getFlag().intValue()) {            dutyOrder.setDutyNumber(Integer.valueOf(names.length - 1));        }        System.out.println(nameOrder);        this.dutyOrderMapper.updateByExampleSelective(dutyOrder, example);    }    @Override    public void weekDutyChange() {        DutyOrderExample example = new DutyOrderExample();        Criteria c = example.createCriteria();        c.andDutyTypeIdEqualTo(Integer.valueOf(2));        DutyOrder dutyOrder = (DutyOrder) this.dutyOrderMapper.selectByExample(example).get(0);        int length = dutyOrder.getFlag().intValue();        int dutyNumber = dutyOrder.getDutyNumber().intValue();        if (dutyNumber == length - 1) {            dutyNumber = 0;        } else {            dutyNumber++;        }        dutyOrder.setDutyNumber(Integer.valueOf(dutyNumber));        this.dutyOrderMapper.updateByExampleSelective(dutyOrder, example);        DutyOrderExample example1 = new DutyOrderExample();        Criteria c1 = example1.createCriteria();        c1.andDutyTypeIdEqualTo(Integer.valueOf(1));        DutyOrder dutyOrder1 = (DutyOrder) this.dutyOrderMapper.selectByExample(example1).get(0);        int length1 = dutyOrder1.getFlag().intValue();        int dutyNumber1 = dutyOrder1.getDutyNumber().intValue();        if (dutyNumber1 == length1 - 1) {            dutyNumber1 = 0;        } else {            dutyNumber1++;        }        dutyOrder1.setDutyNumber(Integer.valueOf(dutyNumber1));        System.out.println(dutyNumber);        System.out.println(dutyNumber1);        this.dutyOrderMapper.updateByExampleSelective(dutyOrder1, example1);    }    @Override    public void monthDutyChange() {        DutyOrderExample example = new DutyOrderExample();        Criteria c = example.createCriteria();        c.andDutyTypeIdEqualTo(Integer.valueOf(3));        DutyOrder dutyOrder = (DutyOrder) this.dutyOrderMapper.selectByExample(example).get(0);        int dutyNumber = dutyOrder.getDutyNumber().intValue();        int length = dutyOrder.getFlag().intValue();        if (dutyNumber == length - 1) {            dutyNumber = 0;        } else {            dutyNumber++;        }        dutyOrder.setDutyNumber(Integer.valueOf(dutyNumber));        this.dutyOrderMapper.updateByExampleSelective(dutyOrder, example);    }    @Override    public void sendWeekDutyMail() {        User xinAoUser = getNextDutyEmp(1);        User dianJianUser = getNextDutyEmp(2);        String xinAoEmail = xinAoUser.getEmail();        String dianJianEmail = dianJianUser.getEmail();        Address xinAoAddr = null;        Address dianJianAddr = null;        try {            xinAoAddr = new InternetAddress(xinAoEmail);            dianJianAddr = new InternetAddress(dianJianEmail);        } catch (AddressException e) {            e.printStackTrace();        }        MailSender.send(xinAoAddr, null, null, "新奥周末值班通知", "亲，下周该你新奥和周末值班啦！");        MailSender.send(dianJianAddr, null, null, "点检值班通知", "亲，下周该你点检值班啦！");    }    @Override    public void sendMonthDutyMail() {        User monthUser = getNextDutyEmp(3);        String monthEmail = monthUser.getEmail();        Address monthAddr = null;        try {            monthAddr = new InternetAddress(monthEmail);        } catch (AddressException e) {            e.printStackTrace();        }        MailSender.send(monthAddr, null, null, "求注册码值班通知", "亲，下周该你求注册码值班啦！");    }    @Override    public void setCurrDuty(int currDuty, int dutyType) {        DutyOrderExample example = new DutyOrderExample();        Criteria c = example.createCriteria();        c.andDutyTypeIdEqualTo(Integer.valueOf(dutyType));        DutyOrder dutyOrder = (DutyOrder) this.dutyOrderMapper.selectByExample(example).get(0);        dutyOrder.setDutyNumber(Integer.valueOf(currDuty));        this.dutyOrderMapper.updateByExampleSelective(dutyOrder, example);    }}